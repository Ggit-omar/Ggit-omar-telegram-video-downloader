import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
)
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))
ADMIN_ID = int(os.getenv("ADMIN_ID"))
APPROVED_FILE = "approved_channels.txt"

def is_channel_approved(channel_id: str) -> bool:
    if not os.path.exists(APPROVED_FILE):
        return False
    with open(APPROVED_FILE, "r") as f:
        return channel_id.strip() in [line.strip() for line in f.readlines()]

def approve_channel(channel_id: str):
    with open(APPROVED_FILE, "a") as f:
        f.write(channel_id.strip() + "\n")

async def approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        return await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶®‡•§")

    if not context.args:
        return await update.message.reply_text("üìå ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®: /approve <channel_id>")

    channel_id = context.args[0]
    if is_channel_approved(channel_id):
        return await update.message.reply_text("‚úÖ ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶ó‡ßá‡¶á ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

    approve_channel(channel_id)
    await update.message.reply_text(f"‚úÖ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ {channel_id} ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        return await update.message.reply_text("üîç ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®: /search <movie name>")

    bot = context.bot

    try:
        chat = await bot.get_chat(os.getenv("CHANNEL_ID"))
        channel_id = str(chat.id)

        if not is_channel_approved(channel_id):
            msg = (
                f"üì¢ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶°‡¶ø‡¶ü‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá:\n"
                f"üìå Title: {chat.title}\n"
                f"üÜî Channel ID: `{channel_id}`\n\n"
                f"‚úÖ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:\n"
                f"/approve {channel_id}"
            )
            await bot.send_message(chat_id=GROUP_ID, text=msg, parse_mode="Markdown")
            return await update.message.reply_text("üö´ ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶è‡¶ñ‡¶®‡ßã ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶®‡ßü‡•§")

    except Exception as e:
        return await update.message.reply_text(f"‚ö†Ô∏è Error: {e}")

    # Proceed to search
    q = " ".join(context.args).lower()
    try:
        async for msg in bot.get_chat(os.getenv("CHANNEL_ID")).iter_history(limit=200):
            caption = msg.caption or msg.text or ""
            if msg.video and q in caption.lower():
                file_id = msg.video.file_id
                file = await bot.get_file(file_id)
                link = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
                return await update.message.reply_text(
                    f"üé¨ {caption}\n\nüîó ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°:\n{link}"
                )
        await update.message.reply_text("‚ùå ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è Error: {e}")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("search", search))
    app.add_handler(CommandHandler("approve", approve))
    print("‚úÖ Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
